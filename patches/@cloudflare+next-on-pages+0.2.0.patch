diff --git a/node_modules/@cloudflare/next-on-pages/dist/index.js b/node_modules/@cloudflare/next-on-pages/dist/index.js
# Necessary until https://github.com/cloudflare/next-on-pages/pull/11 is merged,
# and https://github.com/cloudflare/next-on-pages/issues/17 is fixed.
index 7592663..2d1bcf0 100644
--- a/node_modules/@cloudflare/next-on-pages/dist/index.js
+++ b/node_modules/@cloudflare/next-on-pages/dist/index.js
@@ -5868,35 +5868,6 @@ var prepVercel = async () => {
       JSON.stringify({ projectId: "_", orgId: "_", settings: {} })
     );
   }
-  console.log("\u26A1\uFE0F");
-  console.log("\u26A1\uFE0F Installing 'vercel' CLI...");
-  console.log("\u26A1\uFE0F");
-  const vercelBuild = (0, import_child_process.spawn)("npm", ["install", "-D", "vercel"]);
-  vercelBuild.stdout.on("data", (data2) => {
-    const lines = data2.toString().split("\n");
-    lines.map((line) => {
-      console.log(`\u25B2 ${line}`);
-    });
-  });
-  vercelBuild.stderr.on("data", (data2) => {
-    const lines = data2.toString().split("\n");
-    lines.map((line) => {
-      console.log(`\u25B2 ${line}`);
-    });
-  });
-  await new Promise((resolve2, reject) => {
-    vercelBuild.on("close", (code) => {
-      if (code === 0) {
-        resolve2(null);
-      } else {
-        reject();
-      }
-    });
-  });
-  console.log("\u26A1\uFE0F");
-  console.log("\u26A1\uFE0F");
-  console.log("\u26A1\uFE0F Completed 'npx vercel build'.");
-  console.log("\u26A1\uFE0F");
 };
 var buildVercel = async () => {
   console.log("\u26A1\uFE0F");
diff --git a/node_modules/@cloudflare/next-on-pages/templates/_worker.js/index.ts b/node_modules/@cloudflare/next-on-pages/templates/_worker.js/index.ts
index 42bf66a..62cbc27 100644
--- a/node_modules/@cloudflare/next-on-pages/templates/_worker.js/index.ts
+++ b/node_modules/@cloudflare/next-on-pages/templates/_worker.js/index.ts
@@ -108,9 +108,14 @@ export const routesMatcher = (
   return matchingRoutes;
 };
 
+type CfRequest = Request & { env: { ASSETS: Fetcher } };
+type CfContext = ExecutionContext & { env: { ASSETS: Fetcher } } & {
+  hoge: string;
+};
+
 type EdgeFunction = {
   default: (
-    request: Request,
+    request: CfRequest,
     context: ExecutionContext
   ) => Response | Promise<Response>;
 };
@@ -131,10 +136,15 @@ export default {
     const { pathname } = new URL(request.url);
     const routes = routesMatcher({ request }, __CONFIG__.routes);
 
+    const extendedRequest = Object.assign(request, { env: {
+      GITHUB_OAUTH_CLIENT_ID: env.GITHUB_OAUTH_CLIENT_ID,
+      GITHUB_OAUTH_CLIENT_SECRET: env.GITHUB_OAUTH_CLIENT_SECRET
+    }});
+
     for (const route of routes) {
       if ("middlewarePath" in route && route.middlewarePath in __MIDDLEWARE__) {
         return await __MIDDLEWARE__[route.middlewarePath].entrypoint.default(
-          request,
+          extendedRequest,
           context
         );
       }
@@ -156,10 +166,10 @@ export default {
       }
 
       if (found) {
-        return entrypoint.default(request, context);
+        return entrypoint.default(extendedRequest, context);
       }
     }
 
-    return env.ASSETS.fetch(request);
+    return env.ASSETS.fetch(extendedRequest);
   },
 } as ExportedHandler<{ ASSETS: Fetcher }>;
